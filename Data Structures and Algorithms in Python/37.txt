16                                                            Chapter 1. Python Primer
   a partial order, but not a total order, as disjoint sets are neither “less than,” “equal
   to,” or “greater than” each other. Sets also support many fundamental behaviors
   through named methods (e.g., add, remove); we will explore their functionality
   more fully in Chapter 10.
       Dictionaries, like sets, do not maintain a well-deﬁned order on their elements.
   Furthermore, the concept of a subset is not typically meaningful for dictionaries, so
   the dict class does not support operators such as <. Dictionaries support the notion
   of equivalence, with d1 == d2 if the two dictionaries contain the same set of key-
   value pairs. The most widely used behavior of dictionaries is accessing a value
   associated with a particular key k with the indexing syntax, d[k]. The supported
   operators are as follows:
               d[key]        value associated with given key
          d[key] = value     set (or reset) the value associated with given key
             del d[key]      remove key and its associated value from dictionary
              key in d       containment check
           key not in d      non-containment check
             d1 == d2        d1 is equivalent to d2
             d1 != d2        d1 is not equivalent to d2
   Dictionaries also support many useful behaviors through named methods, which
   we explore more fully in Chapter 10.
   Extended Assignment Operators
   Python supports an extended assignment operator for most binary operators, for
   example, allowing a syntax such as count += 5. By default, this is a shorthand for
   the more verbose count = count + 5. For an immutable type, such as a number or
   a string, one should not presume that this syntax changes the value of the existing
   object, but instead that it will reassign the identiﬁer to a newly constructed value.
   (See discussion of Figure 1.3.) However, it is possible for a type to redeﬁne such
   semantics to mutate the object, as the list class does for the += operator.
   alpha = [1, 2, 3]
   beta = alpha                    #  an alias for alpha
   beta += [4, 5]                  #  extends the original list with two more elements
   beta = beta + [6, 7]            #  reassigns beta to a new list [1, 2, 3, 4, 5, 6, 7]
   print(alpha)                    #  will be [1, 2, 3, 4, 5]
   This example demonstrates the subtle difference between the list semantics for the
   syntax beta += foo versus beta = beta + foo.
