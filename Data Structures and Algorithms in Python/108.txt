2.4. Inheritance                                                                                   87
       2.4.2 Hierarchy of Numeric Progressions
           As a second example of the use of inheritance, we develop a hierarchy of classes for
           iterating numeric progressions. A numeric progression is a sequence of numbers,
           where each number depends on one or more of the previous numbers. For example,
           an arithmetic progression determines the next number by adding a ﬁxed constant
           to the previous value, and a geometric progression determines the next number
           by multiplying the previous value by a ﬁxed constant. In general, a progression
           requires a ﬁrst value, and a way of identifying a new value based on one or more
           previous values.
                To maximize reusability of code, we develop a hierarchy of classes stemming
           from a general base class that we name Progression (see Figure 2.7). Technically,
           the Progression class produces the progression of whole numbers: 0, 1, 2, . . . .
           However, this class is designed to serve as the base class for other progression types,
           providing as much common functionality as possible, and thereby minimizing the
           burden on the subclasses.
                                                   Progression
              ArithmeticProgression            GeometricProgression           FibonacciProgression
                               Figure 2.7: Our hierarchy of progression classes.
                Our implementation of the basic Progression class is provided in Code Frag-
           ment 2.8. The constructor for this class accepts a starting value for the progression
           (0 by default), and initializes a data member, self. current, to that value.
                The Progression class implements the conventions of a Python iterator (see
           Section 2.3.4), namely the special next and iter methods. If a user of
           the class creates a progression as seq = Progression( ), each call to next(seq) will
           return a subsequent element of the progression sequence. It would also be possi-
           ble to use a for-loop syntax, for value in seq:, although we note that our default
           progression is deﬁned as an inﬁnite sequence.
                To better separate the mechanics of the iterator convention from the core logic
           of advancing the progression, our framework relies on a nonpublic method named
             advance to update the value of the self. current ﬁeld. In the default implementa-
           tion, advance adds one to the current value, but our intent is that subclasses will
           override advance to provide a different rule for computing the next entry.
                For convenience, the Progression class also provides a utility method, named
           print progression, that displays the next n values of the progression.
