36                                                              Chapter 1. Python Primer
   1.7.2 Catching an Exception
      There are several philosophies regarding how to cope with possible exceptional
      cases when writing code. For example, if a division x/y is to be computed, there
      is clear risk that a ZeroDivisionError will be raised when variable y has value 0. In
      an ideal situation, the logic of the program may dictate that y has a nonzero value,
      thereby removing the concern for error. However, for more complex code, or in
      a case where the value of y depends on some external input to the program, there
      remains some possibility of an error.
           One philosophy for managing exceptional cases is to “look before you leap.”
      The goal is to entirely avoid the possibility of an exception being raised through
      the use of a proactive conditional test. Revisiting our division example, we might
      avoid the offending situation by writing:
           if y != 0:
              ratio = x / y
           else:
              ... do something else ...
           A second philosophy, often embraced by Python programmers, is that “it is
      easier to ask for forgiveness than it is to get permission.” This quote is attributed
      to Grace Hopper, an early pioneer in computer science. The sentiment is that we
      need not spend extra execution time safeguarding against every possible excep-
      tional case, as long as there is a mechanism for coping with a problem after it
      arises. In Python, this philosophy is implemented using a try-except control struc-
      ture. Revising our ﬁrst example, the division operation can be guarded as follows:
           try:
              ratio = x / y
           except ZeroDivisionError:
              ... do something else ...
      In this structure, the “try” block is the primary code to be executed. Although it
      is a single command in this example, it can more generally be a larger block of
      indented code. Following the try-block are one or more “except” cases, each with
      an identiﬁed error type and an indented block of code that should be executed if the
      designated error is raised within the try-block.
           The relative advantage of using a try-except structure is that the non-exceptional
      case runs efﬁciently, without extraneous checks for the exceptional condition. How-
      ever, handling the exceptional case requires slightly more time when using a try-
      except structure than with a standard conditional statement. For this reason, the
      try-except clause is best used when there is reason to believe that the exceptional
      case is relatively unlikely, or when it is prohibitively expensive to proactively eval-
      uate a condition to avoid the exception.
