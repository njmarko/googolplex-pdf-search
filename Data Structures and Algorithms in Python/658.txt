14.2. Data Structures for Graphs                                                      637
      40    def get edge(self, u, v):
      41      ”””Return the edge from u to v, or None if not adjacent.”””
      42      return self. outgoing[u].get(v)            # returns None if v not adjacent
      43
      44    def degree(self, v, outgoing=True):
      45      ”””Return number of (outgoing) edges incident to vertex v in the graph.
      46
      47      If graph is directed, optional parameter used to count incoming edges.
      48      ”””
      49      adj = self. outgoing if outgoing else self. incoming
      50      return len(adj[v])
      51
      52    def incident edges(self, v, outgoing=True):
      53      ”””Return all (outgoing) edges incident to vertex v in the graph.
      54
      55      If graph is directed, optional parameter used to request incoming edges.
      56      ”””
      57      adj = self. outgoing if outgoing else self. incoming
      58      for edge in adj[v].values( ):
      59         yield edge
      60
      61    def insert vertex(self, x=None):
      62      ”””Insert and return a new Vertex with element x.”””
      63      v = self.Vertex(x)
      64      self. outgoing[v] = { }
      65      if self.is directed( ):
      66         self. incoming[v] = { }          # need distinct map for incoming edges
      67      return v
      68
      69    def insert edge(self, u, v, x=None):
      70      ”””Insert and return a new Edge from u to v with auxiliary element x.”””
      71      e = self.Edge(u, v, x)
      72      self. outgoing[u][v] = e
      73      self. incoming[v][u] = e
          Code Fragment 14.3: Graph class deﬁnition (continued from Code Fragment 14.2).
          We omit error-checking of parameters for brevity.
