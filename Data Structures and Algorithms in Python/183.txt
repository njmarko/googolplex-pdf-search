162                                                                Chapter 4. Recursion
    Drawing an English Ruler
    In analyzing the English ruler application from Section 4.1.2, we consider the fun-
    damental question of how many total lines of output are generated by an initial call
    to draw interval(c), where c denotes the center length. This is a reasonable bench-
    mark for the overall efﬁciency of the algorithm as each line of output is based upon
    a call to the draw line utility, and each recursive call to draw interval with nonzero
    parameter makes exactly one direct call to draw line.
        Some intuition may be gained by examining the source code and the recur-
    sion trace. We know that a call to draw interval(c) for c > 0 spawns two calls to
    draw interval(c−1) and a single call to draw line. We will rely on this intuition to
    prove the following claim.
    Proposition 4.1: For c ≥ 0, a call to draw interval(c) results in precisely 2c − 1
    lines of output.
    Justiﬁcation: We provide a formal proof of this claim by induction (see Sec-
    tion 3.4.3). In fact, induction is a natural mathematical technique for proving the
    correctness and efﬁciency of a recursive process. In the case of the ruler, we
    note that an application of draw interval(0) generates no output, and that 20 − 1 =
    1 − 1 = 0. This serves as a base case for our claim.
        More generally, the number of lines printed by draw interval(c) is one more
    than twice the number generated by a call to draw interval(c−1), as one center
    line is printed between two such recursive calls. By induction, we have that the
    number of lines is thus 1 + 2 · (2c−1 − 1) = 1 + 2c − 2 = 2c − 1.
        This proof is indicative of a more mathematically rigorous tool, known as a
    recurrence equation that can be used to analyze the running time of a recursive
    algorithm. That technique is discussed in Section 12.2.4, in the context of recursive
    sorting algorithms.
    Performing a Binary Search
    Considering the running time of the binary search algorithm, as presented in Sec-
    tion 4.1.3, we observe that a constant number of primitive operations are executed
    at each recursive call of method of a binary search. Hence, the running time is
    proportional to the number of recursive calls performed. We will show that at most
    log n + 1 recursive calls are made during a binary search of a sequence having n
    elements, leading to the following claim.
    Proposition 4.2: The binary search algorithm runs in O(log n) time for a sorted
    sequence with n elements.
