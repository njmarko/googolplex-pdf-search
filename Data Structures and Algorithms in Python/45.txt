24                                                             Chapter 1. Python Primer
      Return Statement
      A return statement is used within the body of a function to indicate that the func-
      tion should immediately cease execution, and that an expressed value should be
      returned to the caller. If a return statement is executed without an explicit argu-
      ment, the None value is automatically returned. Likewise, None will be returned if
      the ﬂow of control ever reaches the end of a function body without having executed
      a return statement. Often, a return statement will be the ﬁnal command within the
      body of the function, as was the case in our earlier example of a count function.
      However, there can be multiple return statements in the same function, with con-
      ditional logic controlling which such command is executed, if any. As a further
      example, consider the following function that tests if a value exists in a sequence.
           def contains(data, target):
              for item in target:
                if item == target:                           # found a match
                   return True
              return False
      If the conditional within the loop body is ever satisﬁed, the return True statement is
      executed and the function immediately ends, with True designating that the target
      value was found. Conversely, if the for loop reaches its conclusion without ever
      ﬁnding the match, the ﬁnal return False statement will be executed.
   1.5.1 Information Passing
      To be a successful programmer, one must have clear understanding of the mech-
      anism in which a programming language passes information to and from a func-
      tion. In the context of a function signature, the identiﬁers used to describe the
      expected parameters are known as formal parameters, and the objects sent by the
      caller when invoking the function are the actual parameters. Parameter passing
      in Python follows the semantics of the standard assignment statement. When a
      function is invoked, each identiﬁer that serves as a formal parameter is assigned, in
      the function’s local scope, to the respective actual parameter that is provided by the
      caller of the function.
           For example, consider the following call to our count function from page 23:
           prizes = count(grades, A )
      Just before the function body is executed, the actual parameters, grades and A ,
      are implicitly assigned to the formal parameters, data and target, as follows:
           data = grades
           target = A
