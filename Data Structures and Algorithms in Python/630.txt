13.5. Tries                                                                                                                      609
                The attentive reader may wonder whether the compression of paths provides
           any signiﬁcant advantage, since it is offset by a corresponding expansion of the
           node labels. Indeed, a compressed trie is truly advantageous only when it is used as
           an auxiliary index structure over a collection of strings already stored in a primary
           structure, and is not required to actually store all the characters of the strings in the
           collection.
                Suppose, for example, that the collection S of strings is an array of strings S[0],
           S[1], . . ., S[s − 1]. Instead of storing the label X of a node explicitly, we represent
           it implicitly by a combination of three integers (i, j : k), such that X = S[i][ j : k];
           that is, X is the slice of S[i] consisting of the characters from the jth up to but
           not including the kth . (See the example in Figure 13.13. Also compare with the
           standard trie of Figure 13.11.)
                          0 1 2 3 4                              0 1 2 3                                         0 1 2 3
            S[0] =        s e e                    S[4] =        b u l l                           S[7] =        h e a r
            S[1] =        b e a r                  S[5] =        b u y                             S[8] =        b e l l
            S[2] =        s e l l                  S[6] =        b i d                             S[9] =        s t o p
            S[3] =        s t o c k
                                                                  (a)
                                     1, 0 : 1                         7, 0 : 4                        0, 0 : 1
                    1, 1 : 2         6, 1 : 3         4, 1 : 2                        0, 1 : 2                        3, 1 : 3
            1, 2 : 4        8, 2 : 4          4, 2 : 4        5, 2 : 3        0, 2 : 3        2, 2 : 4        3, 3 : 5        9, 3 : 4
                                                                 (b)
           Figure 13.13: (a) Collection S of strings stored in an array. (b) Compact represen-
           tation of the compressed trie for S.
                This additional compression scheme allows us to reduce the total space for the
           trie itself from O(n) for the standard trie to O(s) for the compressed trie, where n
           is the total length of the strings in S and s is the number of strings in S. We must
           still store the different strings in S, of course, but we nevertheless reduce the space
           for the trie.
                Searching in a compressed trie is not necessarily faster than in a standard tree,
           since there is still need to compare every character of the desired pattern with the
           potentially multi-character labels while traversing paths in the trie.
