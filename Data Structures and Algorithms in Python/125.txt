104                                        Chapter 2. Object-Oriented Programming
    R-2.11 In Section 2.3.3, we note that our Vector class supports a syntax such as
           v = u + [5, 3, 10, −2, 1], in which the sum of a vector and list returns
           a new vector. However, the syntax v = [5, 3, 10, −2, 1] + u is illegal.
           Explain how the Vector class deﬁnition can be revised so that this syntax
           generates a new vector.
    R-2.12 Implement the mul method for the Vector class of Section 2.3.3, so
           that the expression v 3 returns a new vector with coordinates that are 3
           times the respective coordinates of v.
    R-2.13 Exercise R-2.12 asks for an implementation of mul , for the Vector
           class of Section 2.3.3, to provide support for the syntax v 3. Implement
           the rmul method, to provide additional support for syntax 3 v.
    R-2.14 Implement the mul method for the Vector class of Section 2.3.3, so
           that the expression u v returns a scalar that represents the dot product of
           the vectors, that is, ∑di=1 ui · vi .
    R-2.15 The Vector class of Section 2.3.3 provides a constructor that takes an in-
           teger d, and produces a d-dimensional vector with all coordinates equal to
           0. Another convenient form for creating a new vector would be to send the
           constructor a parameter that is some iterable type representing a sequence
           of numbers, and to create a vector with dimension equal to the length of
           that sequence and coordinates equal to the sequence values. For example,
           Vector([4, 7, 5]) would produce a three-dimensional vector with coordi-
           nates <4, 7, 5>. Modify the constructor so that either of these forms is
           acceptable; that is, if a single integer is sent, it produces a vector of that
           dimension with all zeros, but if a sequence of numbers is provided, it pro-
           duces a vector with coordinates based on that sequence.
    R-2.16 Our Range class, from Section 2.3.5, relies on the formula
                         max(0, (stop − start + step − 1) // step)
           to compute the number of elements in the range. It is not immediately ev-
           ident why this formula provides the correct calculation, even if assuming
           a positive step size. Justify this formula, in your own words.
    R-2.17 Draw a class inheritance diagram for the following set of classes:
              • Class Goat extends object and adds an instance variable tail and
                 methods milk( ) and jump( ).
              • Class Pig extends object and adds an instance variable nose and
                 methods eat(food) and wallow( ).
              • Class Horse extends object and adds instance variables height and
                  color, and methods run( ) and jump( ).
              • Class Racer extends Horse and adds a method race( ).
              • Class Equestrian extends Horse, adding an instance variable weight
                 and methods trot( ) and is trained( ).
