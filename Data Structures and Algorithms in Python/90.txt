2.3. Class Deﬁnitions                                                                           69
  2.3      Class Deﬁnitions
           A class serves as the primary means for abstraction in object-oriented program-
           ming. In Python, every piece of data is represented as an instance of some class.
           A class provides a set of behaviors in the form of member functions (also known
           as methods), with implementations that are common to all instances of that class.
           A class also serves as a blueprint for its instances, effectively determining the way
           that state information for each instance is represented in the form of attributes (also
           known as ﬁelds, instance variables, or data members).
       2.3.1 Example: CreditCard Class
           As a ﬁrst example, we provide an implementation of a CreditCard class based on
           the design we introduced in Figure 2.3 of Section 2.2.1. The instances deﬁned by
           the CreditCard class provide a simple model for traditional credit cards. They have
           identifying information about the customer, bank, account number, credit limit, and
           current balance. The class restricts charges that would cause a card’s balance to go
           over its spending limit, but it does not charge interest or late payments (we revisit
           such themes in Section 2.4.1).
               Our code begins in Code Fragment 2.1 and continues in Code Fragment 2.2.
           The construct begins with the keyword, class, followed by the name of the class, a
           colon, and then an indented block of code that serves as the body of the class. The
           body includes deﬁnitions for all methods of the class. These methods are deﬁned as
           functions, using techniques introduced in Section 1.5, yet with a special parameter,
           named self, that serves to identify the particular instance upon which a member is
           invoked.
           The self Identiﬁer
           In Python, the self identiﬁer plays a key role. In the context of the CreditCard
           class, there can presumably be many different CreditCard instances, and each must
           maintain its own balance, its own credit limit, and so on. Therefore, each instance
           stores its own instance variables to reﬂect its current state.
               Syntactically, self identiﬁes the instance upon which a method is invoked. For
           example, assume that a user of our class has a variable, my card, that identiﬁes
           an instance of the CreditCard class. When the user calls my card.get balance( ),
           identiﬁer self, within the deﬁnition of the get balance method, refers to the card
           known as my card by the caller. The expression, self. balance refers to an instance
           variable, named balance, stored as part of that particular credit card’s state.
