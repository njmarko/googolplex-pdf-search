224                                                       Chapter 5. Array-Based Sequences
 5.7    Exercises
        For help with exercises, please visit the site, www.wiley.com/college/goodrich.
     Reinforcement
          R-5.1 Execute the experiment from Code Fragment 5.1 and compare the results
                  on your system to those we report in Code Fragment 5.2.
          R-5.2 In Code Fragment 5.1, we perform an experiment to compare the length of
                  a Python list to its underlying memory usage. Determining the sequence
                  of array sizes requires a manual inspection of the output of that program.
                  Redesign the experiment so that the program outputs only those values of
                  k at which the existing capacity is exhausted. For example, on a system
                  consistent with the results of Code Fragment 5.2, your program should
                  output that the sequence of array capacities are 0, 4, 8, 16, 25, . . . .
          R-5.3 Modify the experiment from Code Fragment 5.1 in order to demonstrate
                  that Python’s list class occasionally shrinks the size of its underlying array
                  when elements are popped from a list.
          R-5.4 Our DynamicArray class, as given in Code Fragment 5.3, does not support
                  use of negative indices with getitem . Update that method to better
                  match the semantics of a Python list.
          R-5.5 Redo the justiﬁcation of Proposition 5.1 assuming that the the cost of
                  growing the array from size k to size 2k is 3k cyber-dollars. How much
                  should each append operation be charged to make the amortization work?
          R-5.6 Our implementation of insert for the DynamicArray class, as given in
                  Code Fragment 5.5, has the following inefﬁciency. In the case when a re-
                  size occurs, the resize operation takes time to copy all the elements from
                  an old array to a new array, and then the subsequent loop in the body of
                  insert shifts many of those elements. Give an improved implementation
                  of the insert method, so that, in the case of a resize, the elements are
                  shifted into their ﬁnal position during that operation, thereby avoiding the
                  subsequent shifting.
          R-5.7 Let A be an array of size n ≥ 2 containing integers from 1 to n − 1, inclu-
                  sive, with exactly one repeated. Describe a fast algorithm for ﬁnding the
                  integer in A that is repeated.
          R-5.8 Experimentally evaluate the efﬁciency of the pop method of Python’s list
                  class when using varying indices as a parameter, as we did for insert on
                  page 205. Report your results akin to Table 5.5.
