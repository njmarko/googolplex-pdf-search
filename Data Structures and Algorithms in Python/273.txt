252                                          Chapter 6. Stacks, Queues, and Deques
    C-6.21 Show how to use a stack S and a queue Q to generate all possible subsets
           of an n-element set T nonrecursively.
    C-6.22 Postﬁx notation is an unambiguous way of writing an arithmetic expres-
           sion without parentheses. It is deﬁned so that if “(exp1 ) op (exp2 )” is a
           normal, fully parenthesized expression whose operation is op, the postﬁx
           version of this is “pexp1 pexp2 op”, where pexp1 is the postﬁx version of
           exp1 and pexp2 is the postﬁx version of exp2 . The postﬁx version of a sin-
           gle number or variable is just that number or variable. For example, the
           postﬁx version of “((5 + 2) ∗ (8 − 3))/4” is “5 2 + 8 3 − ∗ 4 /”. Describe
           a nonrecursive way of evaluating an expression in postﬁx notation.
    C-6.23 Suppose you have three nonempty stacks R, S, and T . Describe a sequence
           of operations that results in S storing all elements originally in T below all
           of S’s original elements, with both sets of those elements in their original
           order. The ﬁnal conﬁguration for R should be the same as its original
           conﬁguration. For example, if R = [1, 2, 3], S = [4, 5], and T = [6, 7, 8, 9],
           the ﬁnal conﬁguration should have R = [1, 2, 3] and S = [6, 7, 8, 9, 4, 5].
    C-6.24 Describe how to implement the stack ADT using a single queue as an
           instance variable, and only constant additional local memory within the
           method bodies. What is the running time of the push(), pop(), and top()
           methods for your design?
    C-6.25 Describe how to implement the queue ADT using two stacks as instance
           variables, such that all queue operations execute in amortized O(1) time.
           Give a formal proof of the amortized bound.
    C-6.26 Describe how to implement the double-ended queue ADT using two stacks
           as instance variables. What are the running times of the methods?
    C-6.27 Suppose you have a stack S containing n elements and a queue Q that is
           initially empty. Describe how you can use Q to scan S to see if it contains a
           certain element x, with the additional constraint that your algorithm must
           return the elements back to S in their original order. You may only use S,
           Q, and a constant number of other variables.
    C-6.28 Modify the ArrayQueue implementation so that the queue’s capacity is
           limited to maxlen elements, where maxlen is an optional parameter to the
           constructor (that defaults to None). If enqueue is called when the queue
           is at full capacity, throw a Full exception (deﬁned similarly to Empty).
    C-6.29 In certain applications of the queue ADT, it is common to repeatedly
           dequeue an element, process it in some way, and then immediately en-
           queue the same element. Modify the ArrayQueue implementation to in-
           clude a rotate( ) method that has semantics identical to the combina-
           tion, Q.enqueue(Q.dequeue( )). However, your implementation should
           be more efﬁcient than making two separate calls (for example, because
           there is no need to modify size).
