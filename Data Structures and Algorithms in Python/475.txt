454                                     Chapter 10. Maps, Hash Tables, and Skip Lists
      R-10.24 Give a pseudo-code description of the         delitem    map operation when
               using a skip list.
      R-10.25 Give a concrete implementation of the pop method, in the context of a
               MutableSet abstract base class, that relies only on the ﬁve core set behav-
               iors described in Section 10.5.2.
      R-10.26 Give a concrete implementation of the isdisjoint method in the context
               of the MutableSet abstract base class, relying only on the ﬁve primary
               abstract methods of that class. Your algorithm should run in O(min(n, m))
               where n and m denote the respective cardinalities of the two sets.
      R-10.27 What abstraction would you use to manage a database of friends’ birth-
               days in order to support efﬁcient queries such as “ﬁnd all friends whose
               birthday is today” and “ﬁnd the friend who will be the next to celebrate a
               birthday”?
    Creativity
      C-10.28 On page 406 of Section 10.1.3, we give an implementation of the method
               setdefault as it might appear in the MutableMapping abstract base class.
               While that method accomplishes the goal in a general fashion, its efﬁ-
               ciency is less than ideal. In particular, when the key is new, there will be
               a failed search due to the initial use of getitem , and then a subse-
               quent insertion via setitem . For a concrete implementation, such as
               the UnsortedTableMap, this is twice the work because a complete scan
               of the table will take place during the failed getitem , and then an-
               other complete scan of the table takes place due to the implementation of
                  setitem . A better solution is for the UnsortedTableMap class to over-
               ride setdefault to provide a direct solution that performs a single search.
               Give such an implementation of UnsortedTableMap.setdefault.
      C-10.29 Repeat Exercise C-10.28 for the ProbeHashMap class.
      C-10.30 Repeat Exercise C-10.28 for the ChainHashMap class.
      C-10.31 For an ideal compression function, the capacity of the bucket array for a
               hash table should be a prime number. Therefore, we consider the problem
               of locating a prime number in a range [M, 2M]. Implement a method for
               ﬁnding such a prime by using the sieve algorithm. In this algorithm, we
               allocate a 2M cell Boolean array A, such that cell i is associated with the
               integer i. We then initialize the array cells to all be “true” and we “mark
               off” all the cells that are multiples of 2, 3, 5, √
                                                                 7, and so on. This process
               can stop after it reaches a number larger than 2M.    √ (Hint: Consider a
               bootstrapping method for ﬁnding the primes up to 2M.)
