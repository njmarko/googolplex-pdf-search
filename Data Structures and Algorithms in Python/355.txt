334                                                                          Chapter 8. Trees
    79    def preorder(self):
    80      ”””Generate a preorder iteration of positions in the tree.”””
    81      if not self.is empty( ):
    82         for p in self. subtree preorder(self.root( )):           # start recursion
    83           yield p
    84
    85    def subtree preorder(self, p):
    86      ”””Generate a preorder iteration of positions in subtree rooted at p.”””
    87      yield p                                            # visit p before its subtrees
    88      for c in self.children(p):                         # for each child c
    89         for other in self. subtree preorder(c):         # do preorder of c’s subtree
    90           yield other                                   # yielding each to our caller
       Code Fragment 8.17: Support for performing a preorder traversal of a tree. This
       code should be included in the body of the Tree class.
            Formally, both preorder and the utility subtree preorder are generators. Rather
       than perform a “visit” action from within this code, we yield each position to the
       caller and let the caller decide what action to perform at that position.
            The subtree preorder method is the recursive one. However, because we are
       relying on generators rather than traditional functions, the recursion has a slightly
       different form. In order to yield all positions within the subtree of child c, we loop
       over the positions yielded by the recursive call self. subtree preorder(c), and re-
       yield each position in the outer context. Note that if p is a leaf, the for loop over
       self.children(p) is trivial (this is the base case for our recursion).
            We rely on a similar technique in the public preorder method to re-yield all
       positions that are generated by the recursive process starting at the root of the tree;
       if the tree is empty, nothing is yielded. At this point, we have provided full support
       for the preorder generator. A user of the class can therefore write code such as
             for p in T.preorder( ):
               # ”visit” position p
       The ofﬁcial tree ADT requires that all trees support a positions method as well. To
       use a preorder traversal as the default order of iteration, we include the deﬁnition
       shown in Code Fragment 8.18 within our Tree class. Rather than loop over the
       results returned by the preorder call, we return the entire iteration as an object.
    91    def positions(self):
    92      ”””Generate an iteration of the tree s positions.”””
    93      return self.preorder( )                 # return entire preorder iteration
       Code Fragment 8.18: An implementation of the positions method for the Tree class
       that relies on a preorder traversal to generate the results.
