20                                                              Chapter 1. Python Primer
   1.4.2 Loops
      Python offers two distinct looping constructs. A while loop allows general repeti-
      tion based upon the repeated testing of a Boolean condition. A for loop provides
      convenient iteration of values from a deﬁned series (such as characters of a string,
      elements of a list, or numbers within a given range). We discuss both forms in this
      section.
      While Loops
      The syntax for a while loop in Python is as follows:
           while condition:
              body
      As with an if statement, condition can be an arbitrary Boolean expression, and
      body can be an arbitrary block of code (including nested control structures). The
      execution of a while loop begins with a test of the Boolean condition. If that condi-
      tion evaluates to True, the body of the loop is performed. After each execution of
      the body, the loop condition is retested, and if it evaluates to True, another iteration
      of the body is performed. When the conditional test evaluates to False (assuming
      it ever does), the loop is exited and the ﬂow of control continues just beyond the
      body of the loop.
           As an example, here is a loop that advances an index through a sequence of
      characters until ﬁnding an entry with value X or reaching the end of the sequence.
           j=0
           while j < len(data) and data[j] != X :
             j += 1
      The len function, which we will introduce in Section 1.5.2, returns the length of a
      sequence such as a list or string. The correctness of this loop relies on the short-
      circuiting behavior of the and operator, as described on page 12. We intention-
      ally test j < len(data) to ensure that j is a valid index, prior to accessing element
      data[j]. Had we written that compound condition with the opposite order, the eval-
      uation of data[j] would eventually raise an IndexError when X is not found. (See
      Section 1.7 for discussion of exceptions.)
           As written, when this loop terminates, variable j’s value will be the index of
      the leftmost occurrence of X , if found, or otherwise the length of the sequence
      (which is recognizable as an invalid index to indicate failure of the search). It is
      worth noting that this code behaves correctly, even in the special case when the list
      is empty, as the condition j < len(data) will initially fail and the body of the loop
      will never be executed.
