416                                        Chapter 10. Maps, Hash Tables, and Skip Lists
    Compression Functions
      The hash code for a key k will typically not be suitable for immediate use with a
      bucket array, because the integer hash code may be negative or may exceed the ca-
      pacity of the bucket array. Thus, once we have determined an integer hash code for
      a key object k, there is still the issue of mapping that integer into the range [0, N −1].
      This computation, known as a compression function, is the second action per-
      formed as part of an overall hash function. A good compression function is one
      that minimizes the number of collisions for a given set of distinct hash codes.
      The Division Method
      A simple compression function is the division method, which maps an integer i to
                                                i mod N,
      where N, the size of the bucket array, is a ﬁxed positive integer. Additionally, if we
      take N to be a prime number, then this compression function helps “spread out” the
      distribution of hashed values. Indeed, if N is not prime, then there is greater risk
      that patterns in the distribution of hash codes will be repeated in the distribution of
      hash values, thereby causing collisions. For example, if we insert keys with hash
      codes {200, 205, 210, 215, 220, . . . , 600} into a bucket array of size 100, then each
      hash code will collide with three others. But if we use a bucket array of size 101,
      then there will be no collisions. If a hash function is chosen well, it should ensure
      that the probability of two different keys getting hashed to the same bucket is 1/N.
      Choosing N to be a prime number is not always enough, however, for if there is
      a repeated pattern of hash codes of the form pN + q for several different p’s, then
      there will still be collisions.
      The MAD Method
      A more sophisticated compression function, which helps eliminate repeated pat-
      terns in a set of integer keys, is the Multiply-Add-and-Divide (or “MAD”) method.
      This method maps an integer i to
                                       [(ai + b) mod p] mod N,
      where N is the size of the bucket array, p is a prime number larger than N, and a
      and b are integers chosen at random from the interval [0, p − 1], with a > 0. This
      compression function is chosen in order to eliminate repeated patterns in the set of
      hash codes and get us closer to having a “good” hash function, that is, one such that
      the probability any two different keys collide is 1/N. This good behavior would be
      the same as we would have if these keys were “thrown” into A uniformly at random.
