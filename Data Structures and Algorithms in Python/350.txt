8.4. Tree Traversal Algorithms                                                                  329
           Postorder Traversal
           Another important tree traversal algorithm is the postorder traversal. In some
           sense, this algorithm can be viewed as the opposite of the preorder traversal, be-
           cause it recursively traverses the subtrees rooted at the children of the root ﬁrst, and
           then visits the root (hence, the name “postorder”). Pseudo-code for the postorder
           traversal is given in Code Fragment 8.13, and an example of a postorder traversal
           is portrayed in Figure 8.16.
           Algorithm postorder(T, p):
              for each child c in T.children(p) do
                 postorder(T, c)                   {recursively traverse the subtree rooted at c}
              perform the “visit” action for position p
           Code Fragment 8.13: Algorithm postorder for performing the postorder traversal of
           a subtree rooted at position p of a tree T.
                                                 Paper
             Title   Abstract     §1                    §2                    §3      References
                            § 1.1    § 1.2     § 2.1   § 2.2   § 2.3     § 3.1     § 3.2
                    Figure 8.16: Postorder traversal of the ordered tree of Figure 8.15.
           Running-Time Analysis
           Both preorder and postorder traversal algorithms are efﬁcient ways to access all the
           positions of a tree. The analysis of either of these traversal algorithms is similar to
           that of algorithm height2, given in Code Fragment 8.5 of Section 8.1.3. At each
           position p, the nonrecursive part of the traversal algorithm requires time O(c p + 1),
           where c p is the number of children of p, under the assumption that the “visit” itself
           takes O(1) time. By Proposition 8.5, the overall running time for the traversal of
           tree T is O(n), where n is the number of positions in the tree. This running time is
           asymptotically optimal since the traversal must visit all the n positions of the tree.
