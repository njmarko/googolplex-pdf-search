382                                                          Chapter 9. Priority Queues
    Python Implementation of a Bottom-Up Heap Construction
    Implementing a bottom-up heap construction is quite easy, given the existence of
    a “down-heap” utility function. The “merging” of two equally sized heaps that
    are subtrees of a common position p, as described in the opening of this section,
    can be accomplished simply by down-heaping p’s entry. For example, that is what
    happened to the key 14 in going from Figure 9.5(f ) to (g).
         With our array-based representation of a heap, if we initially store all n items in
    arbitrary order within the array, we can implement the bottom-up heap construction
    process with a single loop that makes a call to downheap from each position of
    the tree, as long as those calls are ordered starting with the deepest level and ending
    with the root of the tree. In fact, that loop can start with the deepest nonleaf, since
    there is no effect when down-heap is called at a leaf position.
         In Code Fragment 9.6, we augment the original HeapPriorityQueue class from
    Section 9.3.4 to provide support for the bottom-up construction of an initial col-
    lection. We introduce a nonpublic utility method, heapify, that calls downheap
    on each nonleaf position, beginning with the deepest and concluding with a call at
    the root of the tree. We have redesigned the constructor of the class to accept an
    optional parameter that can be any sequence of (k,v) tuples. Rather than initializing
    self. data to an empty list, we use a list comprehension syntax (see Section 1.9.2)
    to create an initial list of item composites based on the given contents. We de-
    clare an empty sequence as the default parameter value so that the default syntax
    HeapPriorityQueue( ) continues to result in an empty priority queue.
      def init (self, contents=( )):
         ”””Create a new priority queue.
         By default, queue will be empty. If contents is given, it should be as an
         iterable sequence of (k,v) tuples specifying the initial contents.
      ”””
         self. data = [ self. Item(k,v) for k,v in contents ]         # empty by default
         if len(self. data) > 1:
            self. heapify( )
      def heapify(self):
         start = self. parent(len(self) − 1)           # start at PARENT of last leaf
         for j in range(start, −1, −1):                # going to and including the root
            self. downheap(j)
    Code Fragment 9.6: Revision to the HeapPriorityQueue class of Code Frag-
    ments 9.4 and 9.5 to support a linear-time construction given an initial sequence
    of entries.
