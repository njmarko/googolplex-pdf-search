9.2. Implementing a Priority Queue                                                    367
       1 class UnsortedPriorityQueue(PriorityQueueBase): # base class deﬁnes Item
       2     ”””A min-oriented priority queue implemented with an unsorted list.”””
       3
       4     def ﬁnd min(self):                     # nonpublic utility
       5       ”””Return Position of item with minimum key.”””
       6       if self.is empty( ):                 # is empty inherited from base class
       7          raise Empty( Priority queue is empty )
       8       small = self. data.ﬁrst( )
       9       walk = self. data.after(small)
      10       while walk is not None:
      11          if walk.element( ) < small.element( ):
      12             small = walk
      13          walk = self. data.after(walk)
      14       return small
      15
      16     def init (self):
      17       ”””Create a new empty Priority Queue.”””
      18       self. data = PositionalList( )
      19
      20     def len (self):
      21       ”””Return the number of items in the priority queue.”””
      22       return len(self. data)
      23
      24     def add(self, key, value):
      25       ”””Add a key-value pair.”””
      26       self. data.add last(self. Item(key, value))
      27
      28     def min(self):
      29       ”””Return but do not remove (k,v) tuple with minimum key.”””
      30       p = self. ﬁnd min( )
      31       item = p.element( )
      32       return (item. key, item. value)
      33
      34     def remove min(self):
      35       ”””Remove and return (k,v) tuple with minimum key.”””
      36       p = self. ﬁnd min( )
      37       item = self. data.delete(p)
      38       return (item. key, item. value)
          Code Fragment 9.2: An implementation of a priority queue using an unsorted
          list. The parent class PriorityQueueBase is given in Code Fragment 9.1, and the
          PositionalList class is from Section 7.4.
