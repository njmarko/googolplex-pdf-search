614                                                           Chapter 13. Text Processing
    Creativity
      C-13.15 Describe an example of a text T of length n and a pattern P of length
               m such that force the brute-force pattern-matching algorithm achieves a
               running time that is Ω(nm).
      C-13.16 Adapt the brute-force pattern-matching algorithm in order to implement a
               function, rﬁnd brute(T,P), that returns the index at which the rightmost
               occurrence of pattern P within text T , if any.
      C-13.17 Redo the previous problem, adapting the Boyer-Moore pattern-matching
               algorithm appropriately to implement a function rﬁnd boyer moore(T,P).
      C-13.18 Redo Exercise C-13.16, adapting the Knuth-Morris-Pratt pattern-matching
               algorithm appropriately to implement a function rﬁnd kmp(T,P).
      C-13.19 The count method of Python’s str class reports the maximum number of
               nonoverlapping occurrences of a pattern within a string. For example, the
               call abababa .count( aba ) returns 2 (not 3). Adapt the brute-force
               pattern-matching algorithm to implement a function, count brute(T,P),
               with similar outcome.
      C-13.20 Redo the previous problem, adapting the Boyer-Moore pattern-matching
               algorithm in order to implement a function count boyer moore(T,P).
      C-13.21 Redo Exercise C-13.19, adapting the Knuth-Morris-Pratt pattern-matching
               algorithm appropriately to implement a function count kmp(T,P).
      C-13.22 Give a justiﬁcation of why the compute kmp fail function (Code Frag-
               ment 13.4) runs in O(m) time on a pattern of length m.
      C-13.23 Let T be a text of length n, and let P be a pattern of length m. Describe an
               O(n+m)-time method for ﬁnding the longest preﬁx of P that is a substring
               of T .
      C-13.24 Say that a pattern P of length m is a circular substring of a text T of length
               n > m if P is a (normal) substring of T , or if P is equal to the concatenation
               of a sufﬁx of T and a preﬁx of T , that is, if there is an index 0 ≤ k < m,
               such that P = T [n − m + k : n] + T [0 : k]. Give an O(n + m)-time algorithm
               for determining whether P is a circular substring of T .
      C-13.25 The Knuth-Morris-Pratt pattern-matching algorithm can be modiﬁed to
               run faster on binary strings by redeﬁning the failure function as:
                   f (k) = the largest j < k such that P[0 : j] pj is a sufﬁx of P[1 : k + 1],
               where pj denotes the complement of the jth bit of P. Describe how to
               modify the KMP algorithm to be able to take advantage of this new failure
               function and also give a method for computing this failure function. Show
               that this method makes at most n comparisons between the text and the
               pattern (as opposed to the 2n comparisons needed by the standard KMP
               algorithm given in Section 13.2.3).
