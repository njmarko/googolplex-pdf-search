484                                                              Chapter 11. Search Trees
                    5                                             4
                   44                                            44
       2                                4            2                            3
      17                               78 z          17                          62 x
              1              3                 1          1              2              2
    0        32             50 y              88   0      32            50 y            78 z
                      1             2                               1          1              1
           0    0    48             62 x    0    0      0    0     48         54      0      88
                                1             T4                                     T3
                   0    0      54     0                          0    0     0    0         0    0
                     T1               T3                           T1         T2             T4
                             0    0
                               T2
                        (a)                                             (b)
    Figure 11.12: An example insertion of an item with key 54 in the AVL tree of
    Figure 11.11: (a) after adding a new node for key 54, the nodes storing keys 78
    and 44 become unbalanced; (b) a trinode restructuring restores the height-balance
    property. We show the heights of nodes above them, and we identify the nodes x,
    y, and z and subtrees T1 , T2 , T3 , and T4 participating in the trinode restructuring.
         We restore the balance of the nodes in the binary search tree T by a simple
    “search-and-repair” strategy. In particular, let z be the ﬁrst position we encounter in
    going up from p toward the root of T such that z is unbalanced (see Figure 11.12a.)
    Also, let y denote the child of z with higher height (and note that y must be an
    ancestor of p). Finally, let x be the child of y with higher height (there cannot be a
    tie and position x must also be an ancestor of p, possibly p itself ). We rebalance
    the subtree rooted at z by calling the trinode restructuring method, restructure(x),
    originally described in Section 11.2. An example of such a restructuring in the
    context of an AVL insertion is portrayed in Figure 11.12.
         To formally argue the correctness of this process in reestablishing the AVL
    height-balance property, we consider the implication of z being the nearest ancestor
    of p that became unbalanced after the insertion of p. It must be that the height
    of y increased by one due to the insertion and that it is now 2 greater than its
    sibling. Since y remains balanced, it must be that it formerly had subtrees with
    equal heights, and that the subtree containing x has increased its height by one.
    That subtree increased either because x = p, and thus its height changed from 0
    to 1, or because x previously had equal-height subtrees and the height of the one
    containing p has increased by 1. Letting h ≥ 0 denote the height of the tallest child
    of x, this scenario might be portrayed as in Figure 11.13.
         After the trinode restructuring, we see that each of x, y, and z has become
    balanced. Furthermore, the node that becomes the root of the subtree after the
    restructuring has height h + 2, which is precisely the height that z had before the
    insertion of the new item. Therefore, any ancestor of z that became temporarily
    unbalanced becomes balanced again, and this one restructuring restores the height-
    balance property globally.
