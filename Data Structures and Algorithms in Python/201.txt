180                                                                      Chapter 4. Recursion
 4.7    Exercises
        For help with exercises, please visit the site, www.wiley.com/college/goodrich.
     Reinforcement
          R-4.1 Describe a recursive algorithm for ﬁnding the maximum element in a se-
                  quence, S, of n elements. What is your running time and space usage?
          R-4.2 Draw the recursion trace for the computation of power(2, 5), using the
                  traditional function implemented in Code Fragment 4.11.
          R-4.3 Draw the recursion trace for the computation of power(2, 18), using the
                  repeated squaring algorithm, as implemented in Code Fragment 4.12.
          R-4.4 Draw the recursion trace for the execution of function reverse(S, 0, 5)
                  (Code Fragment 4.10) on S = [4, 3, 6, 2, 6].
          R-4.5 Draw the recursion trace for the execution of function PuzzleSolve(3, S,U )
                  (Code Fragment 4.14), where S is empty and U = {a, b, c, d}.
          R-4.6 Describe a recursive function for computing the nth Harmonic number,
                  Hn = ∑ni=1 1/i.
          R-4.7 Describe a recursive function for converting a string of digits into the in-
                  teger it represents. For example, 13531 represents the integer 13, 531.
          R-4.8 Isabel has an interesting way of summing up the values in a sequence A of
                  n integers, where n is a power of two. She creates a new sequence B of half
                  the size of A and sets B[i] = A[2i] + A[2i + 1], for i = 0, 1, . . . , (n/2) − 1. If
                  B has size 1, then she outputs B[0]. Otherwise, she replaces A with B, and
                  repeats the process. What is the running time of her algorithm?
     Creativity
          C-4.9 Write a short recursive Python function that ﬁnds the minimum and max-
                  imum values in a sequence without using any loops.
         C-4.10 Describe a recursive algorithm to compute the integer part of the base-two
                  logarithm of n using only addition and integer division.
         C-4.11 Describe an efﬁcient recursive function for solving the element unique-
                  ness problem, which runs in time that is at most O(n2 ) in the worst case
                  without using sorting.
         C-4.12 Give a recursive algorithm to compute the product of two positive integers,
                  m and n, using only addition and subtraction.
