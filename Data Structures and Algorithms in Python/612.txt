13.2. Pattern-Matching Algorithms                                                           591
           Example 13.2: Consider the pattern P = "amalgamation" from Figure 13.5.
           The Knuth-Morris-Pratt (KMP) failure function, f (k), for the string P is as shown
           in the following table:
                            k    0   1    2   3   4   5   6    7   8   9   10   11
                          P[k]   a   m    a    l  g   a   m    a   t   i    o    n
                          f (k)  0   0    1   0   0   1   2    3   0   0    0    0
          Implementation
           Our implementation of the KMP pattern-matching algorithm is shown in Code
           Fragment 13.3. It relies on a utility function, compute kmp fail, discussed on
           the next page, to compute the failure function efﬁciently.
                The main part of the KMP algorithm is its while loop, each iteration of which
           performs a comparison between the character at index j in T and the character at
           index k in P. If the outcome of this comparison is a match, the algorithm moves on
           to the next characters in both T and P (or reports a match if reaching the end of the
           pattern). If the comparison failed, the algorithm consults the failure function for a
           new candidate character in P, or starts over with the next index in T if failing on
           the ﬁrst character of the pattern (since nothing can be reused).
       1 def ﬁnd kmp(T, P):
       2     ”””Return the lowest index of T at which substring P begins (or else -1).”””
       3     n, m = len(T), len(P)                         # introduce convenient notations
       4     if m == 0: return 0                           # trivial search for empty string
       5     fail = compute kmp fail(P)                    # rely on utility to precompute
       6     j=0                                           # index into text
       7     k=0                                           # index into pattern
       8     while j < n:
       9        if T[j] == P[k]:                           # P[0:1+k] matched thus far
      10           if k == m − 1:                          # match is complete
      11              return j − m + 1
      12           j += 1                                  # try to extend match
      13           k += 1
      14        elif k > 0:
      15           k = fail[k−1]                           # reuse suﬃx of P[0:k]
      16        else:
      17           j += 1
      18     return −1                                     # reached end without match
           Code Fragment 13.3: An implementation of the KMP pattern-matching algorithm.
           The compute kmp fail utility function is given in Code Fragment 13.4.
