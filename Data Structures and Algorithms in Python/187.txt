166                                                               Chapter 4. Recursion
      An Ineﬃcient Recursion for Computing Fibonacci Numbers
      In Section 1.8, we introduced a process for generating the Fibonacci numbers,
      which can be deﬁned recursively as follows:
                                F0 = 0
                                F1 = 1
                                Fn = Fn−2 + Fn−1 for n > 1.
      Ironically, a direct implementation based on this deﬁnition results in the function
      bad ﬁbonacci shown in Code Fragment 4.7, which computes the sequence of Fi-
      bonacci numbers by making two recursive calls in each non-base case.
    1 def bad ﬁbonacci(n):
    2    ”””Return the nth Fibonacci number.”””
    3    if n <= 1:
    4       return n
    5    else:
    6       return bad ﬁbonacci(n−2) + bad ﬁbonacci(n−1)
       Code Fragment 4.7: Computing the nth Fibonacci number using binary recursion.
            Unfortunately, such a direct implementation of the Fibonacci formula results
      in a terribly inefﬁcient function. Computing the nth Fibonacci number in this way
      requires an exponential number of calls to the function. Speciﬁcally, let cn denote
      the number of calls performed in the execution of bad ﬁbonacci(n). Then, we have
      the following values for the cn ’s:
                             c0 = 1
                             c1 = 1
                             c2 = 1 + c0 + c1 = 1 + 1 + 1 = 3
                             c3 = 1 + c1 + c2 = 1 + 1 + 3 = 5
                             c4 = 1 + c2 + c3 = 1 + 3 + 5 = 9
                             c5 = 1 + c3 + c4 = 1 + 5 + 9 = 15
                             c6 = 1 + c4 + c5 = 1 + 9 + 15 = 25
                             c7 = 1 + c5 + c6 = 1 + 15 + 25 = 41
                             c8 = 1 + c6 + c7 = 1 + 25 + 41 = 67
      If we follow the pattern forward, we see that the number of calls more than doubles
      for each two consecutive indices. That is, c4 is more than twice c2 , c5 is more than
      twice c3 , c6 is more than twice c4 , and so on. Thus, cn > 2n/2 , which means that
      bad ﬁbonacci(n) makes a number of calls that is exponential in n.
