8.4. Tree Traversal Algorithms                                                             345
               A labeled version of an indented, preorder presentation, akin to Code Frag-
           ment 8.24, could be generated by the new subclass of EulerTour shown in Code
           Fragment 8.30.
       1 class PreorderPrintIndentedLabeledTour(EulerTour):
       2     def hook previsit(self, p, d, path):
       3        label = . .join(str(j+1) for j in path) # labels are one-indexed
       4        print(2 d        + label, p.element( ))
           Code Fragment 8.30: A subclass of EulerTour that produces a labeled and indented,
           preorder list of a tree’s elements.
               To produce the parenthetic string representation, originally achieved with Code
           Fragment 8.25, we deﬁne a subclass that overrides both the previsit and postvisit
           hooks. Our new implementation is given in Code Fragment 8.31.
       1 class ParenthesizeTour(EulerTour):
       2     def hook previsit(self, p, d, path):
       3        if path and path[−1] > 0:                     # p follows a sibling
       4           print( , , end= )                          # so preface with comma
       5        print(p.element( ), end= )                    # then print element
       6        if not self.tree( ).is leaf(p):               # if p has children
       7           print( ( , end= )                          # print opening parenthesis
       8
       9     def hook postvisit(self, p, d, path, results):
      10        if not self.tree( ).is leaf(p):               # if p has children
      11           print( ) , end= )                          # print closing parenthesis
           Code Fragment 8.31: A subclass of EulerTour that prints a parenthetic string repre-
           sentation of a tree.
           Notice that in this implementation, we need to invoke a method on the tree instance
           that is being traversed from within the hooks. The public tree( ) method of the
           EulerTour class serves as an accessor for that tree.
               Finally, the task of computing disk space, as originally implemented in Code
           Fragment 8.26, can be performed quite easily with the EulerTour subclass shown
           in Code Fragment 8.32. The postvisit result of the root will be returned by the call
           to execute( ).
       1 class DiskSpaceTour(EulerTour):
       2     def hook postvisit(self, p, d, path, results):
       3        # we simply add space associated with p to that of its subtrees
       4        return p.element( ).space( ) + sum(results)
            Code Fragment 8.32: A subclass of EulerTour that computes disk space for a tree.
