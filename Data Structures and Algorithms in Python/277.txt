256                                                              Chapter 7. Linked Lists
          In Chapter 5 we carefully examined Python’s array-based list class, and in
     Chapter 6 we demonstrated use of that class in implementing the classic stack,
     queue, and dequeue ADTs. Python’s list class is highly optimized, and often a
     great choice for storage. With that said, there are some notable disadvantages:
         1. The length of a dynamic array might be longer than the actual number of
            elements that it stores.
         2. Amortized bounds for operations may be unacceptable in real-time systems.
         3. Insertions and deletions at interior positions of an array are expensive.
          In this chapter, we introduce a data structure known as a linked list, which
     provides an alternative to an array-based sequence (such as a Python list). Both
     array-based sequences and linked lists keep elements in a certain order, but us-
     ing a very different style. An array provides the more centralized representation,
     with one large chunk of memory capable of accommodating references to many
     elements. A linked list, in contrast, relies on a more distributed representation in
     which a lightweight object, known as a node, is allocated for each element. Each
     node maintains a reference to its element and one or more references to neighboring
     nodes in order to collectively represent the linear order of the sequence.
          We will demonstrate a trade-off of advantages and disadvantages when con-
     trasting array-based sequences and linked lists. Elements of a linked list cannot be
     efﬁciently accessed by a numeric index k, and we cannot tell just by examining a
     node if it is the second, ﬁfth, or twentieth node in the list. However, linked lists
     avoid the three disadvantages noted above for array-based sequences.
 7.1 Singly Linked Lists
     A singly linked list, in its simplest form, is a collection of nodes that collectively
     form a linear sequence. Each node stores a reference to an object that is an element
     of the sequence, as well as a reference to the next node of the list (see Figures 7.1
     and 7.2).
                                        MSP
                                       element next
     Figure 7.1: Example of a node instance that forms part of a singly linked list. The
     node’s element member references an arbitrary object that is an element of the se-
     quence (the airport code MSP, in this example), while the next member references
     the subsequent node of the linked list (or None if there is no further node).
